{"mappings":"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","sources":["src/steamOAuth.ts"],"sourcesContent":["import { createRequestHandler, routeHandler } from '@ianlucas/http';\r\nimport * as express from 'express';\r\nimport * as session from 'express-session';\r\nimport * as passport from 'passport';\r\nimport * as fileStore from 'session-file-store';\r\n\r\nconst FileStore = fileStore(session);\r\nconst Strategy: any = require('passport-steam');\r\n\r\ntype doneHandler = (error: any, userId?: string) => void;\r\n\r\ninterface SteamSpec {\r\n  apiKey: string;\r\n  onAuthenticate?: (user: UserData) => Promise<void>;\r\n  onFail: routeHandler;\r\n  onSuccess: routeHandler;\r\n  realm: string;\r\n  sessionPath: string;\r\n  sessionSecret: string;\r\n  routePrefix?: string;\r\n}\r\n\r\nexport interface UserData {\r\n  id: string;\r\n  id2: string;\r\n  name: string;\r\n  photo: string;\r\n}\r\n\r\ninterface SteamProfile {\r\n  _json: {\r\n    avatarfull: string;\r\n    personaname: string;\r\n    steamid: string;\r\n  };\r\n}\r\n\r\nfunction replace(one: number, two: number) {\r\n  return one === 1 ? two : one;\r\n}\r\n\r\nfunction getUserData(profile: SteamProfile): UserData {\r\n  const data = profile._json;\r\n  const steamId = BigInt(data.steamid);\r\n  const universeId = replace(Number(steamId >> 56n), 0);\r\n  const accountId = Number(steamId & BigInt(0xffffffff));\r\n  const i1 = universeId;\r\n  const i2 = accountId & 1;\r\n  const i3 = Math.floor(accountId / 2);\r\n  const id2 = `STEAM_${i1}:${i2}:${i3}`;\r\n  return {\r\n    id: data.steamid,\r\n    id2,\r\n    name: data.personaname,\r\n    photo: data.avatarfull\r\n  };\r\n}\r\n\r\nfunction serializeUser(id: any, done: doneHandler) {\r\n  done(null, id);\r\n}\r\n\r\nfunction deserializeUser(id: string, done: doneHandler) {\r\n  done(null, id);\r\n}\r\n\r\nexport function useUserData(handler: (userData: UserData) => Promise<void>) {\r\n  return handler;\r\n}\r\n\r\nexport default function useSteamOAuth(spec: SteamSpec) {\r\n  spec.routePrefix = spec.routePrefix || '';\r\n\r\n  async function validate(\r\n    identifier: string,\r\n    profile: SteamProfile,\r\n    done: doneHandler\r\n  ) {\r\n    try {\r\n      const userData = getUserData(profile);\r\n      if (spec.onAuthenticate) {\r\n        await spec.onAuthenticate(userData);\r\n      }\r\n      return done(null, userData.id);\r\n    } catch (error) {\r\n      return done(error);\r\n    }\r\n  }\r\n\r\n  function authenticate(\r\n    request: express.Request,\r\n    response: express.Response,\r\n    error: any,\r\n    userId: string\r\n  ) {\r\n    if (error) {\r\n      return createRequestHandler(spec.onFail)(request, response, error);\r\n    }\r\n    if (!userId) {\r\n      return createRequestHandler(spec.onFail)(request, response);\r\n    }\r\n    request.logIn(userId, (loginError) => {\r\n      if (loginError) {\r\n        return createRequestHandler(spec.onFail)(request, response, loginError);\r\n      }\r\n      return createRequestHandler(spec.onSuccess)(request, response);\r\n    });\r\n  }\r\n\r\n  function handlePostLogin(\r\n    request: express.Request,\r\n    response: express.Response,\r\n    next: express.NextFunction\r\n  ) {\r\n    passport.authenticate('steam', (error, userId) => {\r\n      authenticate(request, response, error, userId);\r\n    })(request, response, next);\r\n  }\r\n\r\n  return function steamPlugin(app: express.Application) {\r\n    const options = {\r\n      apiKey: spec.apiKey,\r\n      returnURL: `${spec.realm}${spec.routePrefix}/__postlogin__`,\r\n      realm: spec.realm\r\n    };\r\n\r\n    const steamStrategy = new Strategy(options, validate);\r\n    const handleLogin = passport.authenticate('steam');\r\n\r\n    const fileStoreOptions = {\r\n      path: spec.sessionPath || './sessions'\r\n    };\r\n\r\n    const sessionHandler = session({\r\n      secret: spec.sessionSecret,\r\n      resave: true,\r\n      saveUninitialized: true,\r\n      store: new FileStore(fileStoreOptions)\r\n    });\r\n\r\n    app.use(sessionHandler);\r\n    app.use(passport.initialize());\r\n    app.use(passport.session());\r\n\r\n    passport.serializeUser(serializeUser);\r\n    passport.deserializeUser(deserializeUser);\r\n    passport.use(steamStrategy);\r\n\r\n    app.get(spec.routePrefix + '/__login__', handleLogin);\r\n    app.get(spec.routePrefix + '/__postlogin__', handlePostLogin);\r\n  };\r\n}\r\n"],"names":[],"version":3,"file":"steamOAuth.module.js.map"}